{
  "status": "200",
  "data": [
    {
      "txt": "什么是字符串常量池？字符串常量池位于堆内存中，专门用来存储字符串常量，可以提高内存的使用率，避免开辟多块空间存储相同的字符串。"
    },
    {
      "txt": "String有哪些特性？（1）不变性（2）常量池优化（3）final定义如何将数字转换为字符?  答：可以使用String的valueOf()方法。"
    },
    {
      "txt": "如何将字符串反转？使用StringBuilder或者stringBuffer的reverse()方法。判断是否有子文件?判断是否有子目录?判断文件是否存在?判断是否有子文件使用file.isFile()"
    },
    {
      "txt": "String、StringBuffer、StringBuilder区别 ！ String中的对象是不可变的，常量，线程安全。适合操作少量数据。StringBuffer对象可变，加了同步锁，线程安全的。多线程环境下操作大量数据。StringBuilder对象可变，线程不安全。单线程环境下操作字符串缓冲区，大量数据。"
    },
    {
      "txt": "基本数据类型？数值型，整数类型(byte,short,int,long)，浮点类型(float,double)，字符型(char)，布尔型(boolean)如何将数值型字符转换为数字(Integer,Double)?可以用Integer.parseInt()和Double.parseDouble()方法"
    },
    {
      "txt": "引用数据类型？类(class)接口(interface)数组([])swtich()能否作用在byte、long、String上?swtich()传递的应该是一个整数表达式，所以它的值只能是：int、short、char、byte所以long和String都不能作用在swtich()上。"
    },
    {
      "txt": "Java语言采用何种编码方案？有何特点？ Java语言采用Unicode编码标准，Unicode（标准码），它为每个字符制订了一个唯一的数值，因此在任何的语言，平台，程序都可以放心的使用。 "
    },
    {
      "txt": "什么Java注释？用于解释说明程序的文字;jsp中动态include和静态include的区别?动态include用jsp:include实现，适用于动态页面，可以携带参数静态include用include伪码实现，适用于静态页面"
    },
    {
      "txt": "访问修饰符？访问修饰符 public,private,protected,以及不写（默认）时的区别数组有没有length()这个方法?String呢?数组里面没有length()方法，而是length属性。String有length()这个方法。"
    },
    {
      "txt": "关键字 final 有什么用？ 用于修饰类、属性和方法；String s=new String(xyz);创建了几个String Object?创建了两个String对象，一个保存的引用地址，一个保存实际的值。"
    },
    {
      "txt": "final finally finalize区别 final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用System.gc() 方法的时候，由垃圾回收器调用finalize()，回收垃圾，一个对象是否可回收的最后判断"
    },
    {
      "txt": "super关键字的用法 super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。"
    },
    {
      "txt": "什么是多态机制？Java语言是如何实现多态的？ 所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。"
    },
    {
      "txt": "多态的实现? Java实现多态有三个必要条件：继承、重写、向上转型。Session机制?session机制是一种服务器端机制，服务器使用一种类似于散列表的结构来保存信息。"
    },
    {
      "txt": "抽象类和接口的对比? 抽象类是用来捕捉子类的通用特性的。接口是抽象方法的集合。从设计层面来说，抽象类是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。。"
    },
    {
      "txt": "list、set、map问题?set 不允许重复，无序  list   允许重复，有序 map 成对的数据结构，键值必须具有唯一性"
    },
    {
      "txt": "面向对象的特征?封装：通过定义类并且给类的属性和方法加上访问控制,继承：子类继承父类，子类可以拥有父类中已定义的方法，并且子类可以修改父类中的方法使其更适合特殊需求。多台：不同对象对统一消息作出不同响应称之为多态抽象：忽略与当前主题无关的那些方面，将注意力集中在与当前目标有关的方面"
    },
    {
      "txt": "多线程几种实现方法，同步?多线程有两种实现方法，一种是继承Thread类或者实现Runnable接口。同步就是在方法返回类型后面加上synchronized。"
    },
    {
      "txt": "xml解析技术?常用的DOM、SAX等DOM：处理大型文件时性能下降的非常厉害，适合对xml的随机访问 SAX：事件驱动型的xml解析方法，适合对xml的顺序访问"
    },
    {
      "txt": "简述JDBC?JDBC数据库连接，是一种用于执行SQL语句的Java　API，可以为多种关系型数据库提供统一访问。"
    },
    {
      "txt": "数据库三大范式?1：确保每列都是不可分割的原子值2：确保每列都和主键相关3：确保每列都和主键直接相关，而不是间接相关"
    },
    {
      "txt": "单例模式有哪些好处?单例模式是一种比较常见的设计模式，带给我们以下好处 1：控制资源的使用2：控制实例的产生数量3：让多个不相关的两个线程或进程之间实现通信"
    },
    {
      "txt":"list、set、map问题?答：set    不允许重复，无序list   允许重复，有序map    成对的数据结构，键值必须具有唯一性"
    },
    {
      "txt":"Servlet和CGI的区别?Servlet与CGI的区别在于Servlet处于服务器进程中，它通过多线程方式允许其service方法，一个实例可以服务于多个请求，并且其实例一般不会被销毁，而CGI对每个请求都产生新的进程，服务完后就销毁，所以效率上低于Servlet。"
    },
    {
      "txt":"jsp常用动作?jsp:include    引入一个文件jsp:useBean    实例化JavaBeanjsp:setProperty    设置JavaBean属性jsp:getProperty    输出JavaBean属性jsp:forward    转发"
    },
    {
      "txt":"CTS、CLS、CLR分别作何解释? CTS    通用类型系统、CLS    通用语言规范、CLR    公共语言运行时。"
    },
    {
      "txt":"Struts1和Struts2原理和区别?truts1和Struts2是两个完全不同的框架，Struts1以ActionServlet作为核心控制器，由ActionServlet负责拦截用户的所有请求。Struts2以核心控制器FilterDispatcher为基础，包含了框架内部的控制流程和处理机制。"
    },
    {
      "txt":"Hibernate工作原理，Hibernate数据持久化?Hibernate工作原理：1：读取并解析映射信息，创建SessionFactory2：打开Session3：创建事物4：持久化操作5：提交事务6：关闭Session7：关闭SessionFactoryHibernate持久化：Hibernate根据定义的映射规则将对象持久化保存到数据库，这就实现了对象的持久化。"
    },
    {
      "txt":"控制流程靠什么是什么?答：控制流程一般使用if判断条件。有第二分支，多分支，循环结构。循环本质上也是通过判断来实现的。"
    },
    {
      "txt":"同步和异步，在什么情况下分别使用?如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就是共享数据，必须进行同步存取。\n 当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步。在很多情况下采用异步往往更有效率。"
    },
    {
      "txt":"数据库三大范式?1：确保每列都是不可分割的原子值2：确保每列都和主键相关3：确保每列都和主键直接相关，而不是间接相关"
    },
    {
      "txt":"单例模式有哪些好处?单例模式是一种比较常见的设计模式，带给我们以下好处：1：控制资源的使用 2：控制实例的产生数量3：让多个不相关的两个线程或进程之间实现通信"
    },
    {
      "txt":"为什么要用spring?1、主要将各个框架有效的联系起来，缩短实际编程时间。 2、可以将各个框架进行有效的管理和控制，让数据传输安全。"
    },
    {
      "txt":"spring的IOC和DI?控制反转和依赖注入是spring的两大基础作用。主要是将所有组件在spring提供的外部容器中加载。提高安全性，减低耦合性，使各个框架或者类之间的依赖性降低。"
    },
    {
      "txt":"什么是声明式的事务管理?为什么要用?spring如何实现声明式的事务管理?声明式的事务管理主要是将在进行对数据库中数据的添加或者修改时需要执行事务管理，主要是为了避免在执行添加或修改的时候添加或修改不完全正确，导致数据丢失。spring使用AOP面向切面的思想进行事务管理的。"
    },
    {
      "txt":"spring和Hibernate继承后，定义事务管理特性的时候查询为什么要定义为read-only？因为添加、删除和更新都涉及到了数据库的修改，而查询并未涉及到数据库修改，所以只需要定义只读，这样可以提高效率，进行更加方便的事务管理。"
    },
    {
      "txt":"配置了lazy='true'一定会懒加载吗?不一定，如果在配置中你也使用了fetch属性的话此时lazy就会失效。"
    },
    {
      "txt":"什么是视图?游标是什么?视图是一种虚拟的表，具有和物理表相同的功能。游标是对查询出来的结果集作为一个单元来有效的处理，可以对结果集的当前行做修改。"
    },
    {
      "txt":"error和exception有什么区别?error是指错误，通常程序员不能通过代码来解决。底层环境或硬件问题。exception是指异常，可以通过代码来解决的问题。"
    },
    {
      "txt":"说出servlet生命周期?servlet实例化时调用init方法，得到请求时调用service方法，service方法自动派遣doget或dopost方法，最后当实例销毁时调用destroy方法。"
    }
  ]
}
